let v1:[int]2 = reshape{[int],[1,2]}([3,3],[b2iV(tt),2,3,8,b2iV(ff),4,7,6,5]) in
let v2:[int]2 = prArrI(v1) in
let v3:[int]2 = v1 in
let v4:[int]2 = vreverse{[int],[2]}(transp{[int],[2]}(v3)) in
let v5:[int]2 = prArrI(vreverse{[int],[2]}(transp{[int],[2]}(v4))) in
let v8:[int]2 = power(fn v6:[int]2 => let v7:[int]2 = v6 in
          vreverse{[int],[2]}(transp{[int],[2]}(v7)),14,v1) in
let v9:[int]2 = v1 in
let v10:[int]2 = vreverse{[int],[2]}(transp{[int],[2]}(v9)) in
let v13:[bool]2 = zipWith{[int,int,bool],[2]}(eqi,v8,vreverse{[int],[2]}(transp{[int],[2]}(v10))) in
let v16:[bool]0 = prSclB(reduce{[bool],[0]}(andb,tt,rav(v13))) in
let v17:S(int,10) = 10 in
let v28:[int]1 = prArrI(power(fn v24:[int]1 => let v25:[int]1 = v24 in
                 snoc{[int],[0]}(rav(v25),reduce{[int],[0]}(addi,0,takeV{[int],[2]}(~2,rav(v25)))),v17,eachV{[bool,int],[2]}(b2i,[ff,tt]))) in
i2d(b2iV(ff))
