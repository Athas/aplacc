let v1:[double]2 = reshape{[double],[1,2]}([3,5],[2.24,1.10,0.71,0.82,0.71,0.00,0.60,0.50,0.67,0.50,0.00,0.40,0.50,0.33,0.50]) in
let v2:[int]2 = reshape{[int],[1,2]}([3,5],[5,2,1,3,4,0,0,0,2,3,0,5,2,5,5]) in
let v3:[double]2 = reshape{[double],[1,2]}([3,3],[1.00,0.60,0.80,0.60,0.80,0.15,0.80,0.15,0.58]) in
let v5:[double]2 = reshape{[double],[1,2]}([5,3],[~0.03,0.02,0.00,~0.02,~0.00,0.00,~0.02,0.01,0.01,~0.01,0.02,0.01,~0.01,0.02,0.02]) in
let v7:[double]2 = reshape{[double],[1,2]}([5,3],[0.19,0.19,0.15,0.19,0.19,0.15,0.19,0.19,0.15,0.19,0.19,0.15,0.19,0.19,0.15]) in
let v83:[int]2 = reshape{[int],[1,2]}([15,30],[536870912,268435456,134217728,67108864,33554432,16777216,8388608,4194304,2097152,1048576,524288,262144,131072,65536,32768,16384,8192,4096,2048,1024,512,256,128,64,32,16,8,4,2,1,536870912,805306368,671088640,1006632960,570425344,855638016,713031680,1069547520,538968064,808452096,673710080,1010565120,572653568,858980352,715816960,1073725440,536879104,805318656,671098880,1006648320,570434048,855651072,713042560,1069563840,538976288,808464432,673720360,1010580540,572662306,858993459,536870912,805306368,402653184,603979776,973078528,385875968,595591168,826277888,438304768,657457152,999817216,358875136,538574848,807862272,406552576,605372416,975183872,389033984,597170176,828646400,437926400,656873216,1002152832,357921088,536885792,805312304,402662296,603992420,973085210,385885991,536870912,805306368,939524096,335544320,234881024,721420288,411041792,616562688,920649728,1062207488,381157376,258736128,771883008,453181440,545488896,817971200,954261504,340963328,238651392,732843008,417426944,609285376,909831040,1068349120,383778848,256901168,783810616,460062740,537001998,805503019,536870912,805306368,402653184,1006632960,167772160,285212672,713031680,566231040,853540864,489684992,952631296,208928768,316801024,758317056,550076416,813154304,417505280,1009913856,172697600,297131008,704744960,553894656,847291520,499194688,954376224,204607536,306915352,766893116,536972810,805552913,536870912,805306368,402653184,469762048,301989888,721420288,92274688,264241152,941621248,741343232,169345024,924581888,395444224,619380736,1034256384,603963392,838868992,452997120,494934016,331357184,706744832,120597248,261621120,953946048,800208928,148581424,935168536,350484252,630339474,1072370923,536870912,805306368,134217728,1006632960,503316480,754974720,629145600,440401920,94371840,711983104,229113856,374079488,330694656,996212736,907247616,557531136,867573760,190918656,1041467392,490437632,766918144,643898624,462663040,125527616,672545696,202454896,373006376,288845836,1000351766,930090001,536870912,268435456,402653184,872415232,838860800,956301312,612368384,717225984,211812352,386924544,302514176,688128000,1015414784,516751360,1051492352,773734400,914432000,63877120,807741440,165200896,748683776,118489344,168296832,486802240,243663648,667747216,439124552,81674924,975249610,350138737,536870912,268435456,671088640,469762048,973078528,1023410176,713031680,339738624,912261120,797966336,176685056,71565312,510263296,865533952,814120960,961232896,887136256,668078080,116070400,382772224,1047134720,597098752,411468416,625689024,249602976,449975248,745216680,43033924,134873446,201786361,536870912,268435456,402653184,67108864,704643072,385875968,696254464,205520896,920649728,946864128,359137280,859045888,302907392,50659328,462192640,524599296,895541248,590794752,168810496,118033408,831447552,138662144,485185920,796511296,1021313184,1064304752,619184920,997458052,250479054,745865975,536870912,268435456,939524096,1006632960,838860800,889192448,645922816,46137344,476053504,584056832,210239488,465829888,820903936,689897472,73695232,249118720,110075904,315338752,610637824,517665792,1049494016,785318144,376210304,735921088,402760480,738505552,168368744,151499820,344957894,936096557,536870912,805306368,939524096,1006632960,503316480,922746880,41943040,423624704,228589568,651165696,195559424,500957184,791019520,261292032,1040285696,118407168,982065152,625250304,329533440,298984448,153690624,76845824,579619712,692987840,900670432,450334832,363187112,719119956,765461306,382730781,536870912,805306368,402653184,603979776,838860800,117440512,478150656,658505728,752877568,1060110336,141033472,209453056,244187136,272957440,678068224,1014546432,377724928,876875776,443160576,998185984,168665600,318837504,914397568,71818816,40763680,527762288,939688008,335855668,705536494,587273091,536870912,268435456,671088640,738197504,637534208,150994944,813694976,943718400,77594624,179306496,798490624,967049216,134348800,1006698496,235044864,620937216,377643008,826314752,874711040,854819840,725109248,856992512,664336768,94804544,100663328,419430416,411041832,339738668,580911142,61865993,536870912,805306368,939524096,603979776,100663296,452984832,998244352,188743680,866123776,389021696,287834112,172228608,824836096,977731584,153714688,507854848,254402560,88403968,883578880,235160576,118055424,422917888,371224704,326210368,654926368,691353392,773877944,930190180,554263078,842348331]) in
let v95:[double]1 = [1.42,4.63,5.77,3.65,1.27,0.24,0.02,muld(7.75,powd(10.00,~4.00))] in
let v97:[double]1 = [1.00,2.05,1.68,0.69,0.15,0.02,muld(5.48,powd(10.00,~4.00)),muld(1.05,powd(10.00,~9.00))] in
let v99:[double]1 = [6.66,5.46,1.78,0.30,0.03,0.00,muld(2.71,powd(10.00,~4.00)),muld(2.01,powd(10.00,~7.00))] in
let v101:[double]1 = [1.00,0.60,0.14,0.01,muld(7.87,powd(10.00,~4.00)),muld(1.85,powd(10.00,~5.00)),muld(1.42,powd(10.00,~7.00)),muld(2.04,powd(10.00,~15.00))] in
let v105:<int>100000 = iotaV(100000) in
let v112:[int]1 = iota(30) in
let v118:[int]2 = transp{[int],[2]}(reshape{[int],[1,2]}(catV{[int],[1,1]}(shape{[int],[1]}(v112),[100000]),v105)) in
let v119:[int]2 = reshape{[int],[1,2]}(catV{[int],[1,1]}([100000],shape{[int],[1]}(v112)),v112) in
let v127:[int]2 = zipWith{[int,int,int],[2]}(xori,v118,each{[int,int],[2]}(fn v123:[int]0 => shri(v123,1),v118)) in
let v133:[bool]2 = each{[int,bool],[2]}(fn v132:[int]0 => notb(eqi(0,v132)),zipWith{[int,int,int],[2]}(andi,v127,each{[int,int],[2]}(fn v129:[int]0 => shli(1,v129),each{[int,int],[2]}(fn v128:[int]0 => subi(v128,1),v119)))) in
let v135:[int]2 = transp{[int],[2]}(v83) in
let v136:<int>3 = catV{[int],[1,2]}([15],shape{[bool],[2]}(v133)) in
let v140:[bool]3 = transp2{[bool],[3]}([2,1,3],reshape{[bool],[2,3]}(v136,v133)) in
let v141:<int>3 = catV{[int],[1,2]}(dropV{[int],[1]}(~1,shape{[bool],[2]}(v133)),[30,15]) in
let v146:[int]3 = transp2{[int],[3]}([1,3,2],reshape{[int],[2,3]}(v141,v135)) in
let v152:[int]2 = reduce{[int],[2]}(xori,0,zipWith{[int,int,int],[3]}(muli,each{[bool,int],[3]}(b2i,v140),v146)) in
let v156:[double]2 = each{[double,double],[2]}(fn v155:[double]0 => divd(v155,powd(2.00,30.00)),each{[int,double],[2]}(i2d,v152)) in
let v209:[double]2 = each{[double,double],[2]}(fn v183:[double]0 => let v185:[double]0 = subd(v183,0.50) in
         let v187:[double]0 = subd(0.18,muld(v185,v185)) in
         let v192:[double]0 = muld(v185,divd(muld(v187,addd(muld(v187,addd(muld(v187,addd(muld(v187,addd(muld(v187,addd(muld(v187,addd(muld(v187,addd(2509.08,33430.58)),67265.77)),45921.95)),13731.69)),1971.59)),133.14)),3.39)),muld(v187,addd(muld(v187,addd(muld(v187,addd(muld(v187,addd(muld(v187,addd(muld(v187,addd(muld(v187,addd(5226.50,28729.09)),39307.90)),21213.79)),5394.20)),687.19)),42.31)),1.00)))) in
         let v193:[double]0 = addd(0.50,muld(v185,i2d(negi(signd(v185))))) in
         let v194:[double]0 = powd(negd(ln(v193)),0.50) in
         let v196:[double]0 = subd(v194,5.00) in
         let v202:[double]0 = subd(v194,1.60) in
         let v207:[double]0 = addd(muld(divd(muld(v202,addd(muld(v202,addd(muld(v202,addd(muld(v202,addd(muld(v202,addd(muld(v202,addd(muld(v202,addd(idxS{[double],[0]}(1,8,v95),idxS{[double],[0]}(1,7,v95))),idxS{[double],[0]}(1,6,v95))),idxS{[double],[0]}(1,5,v95))),idxS{[double],[0]}(1,4,v95))),idxS{[double],[0]}(1,3,v95))),idxS{[double],[0]}(1,2,v95))),idxS{[double],[0]}(1,1,v95))),muld(v202,addd(muld(v202,addd(muld(v202,addd(muld(v202,addd(muld(v202,addd(muld(v202,addd(muld(v202,addd(idxS{[double],[0]}(1,8,v97),idxS{[double],[0]}(1,7,v97))),idxS{[double],[0]}(1,6,v97))),idxS{[double],[0]}(1,5,v97))),idxS{[double],[0]}(1,4,v97))),idxS{[double],[0]}(1,3,v97))),idxS{[double],[0]}(1,2,v97))),idxS{[double],[0]}(1,1,v97)))),i2d(b2i(lted(v194,5.00)))),muld(divd(muld(v196,addd(muld(v196,addd(muld(v196,addd(muld(v196,addd(muld(v196,addd(muld(v196,addd(muld(v196,addd(idxS{[double],[0]}(1,8,v99),idxS{[double],[0]}(1,7,v99))),idxS{[double],[0]}(1,6,v99))),idxS{[double],[0]}(1,5,v99))),idxS{[double],[0]}(1,4,v99))),idxS{[double],[0]}(1,3,v99))),idxS{[double],[0]}(1,2,v99))),idxS{[double],[0]}(1,1,v99))),muld(v196,addd(muld(v196,addd(muld(v196,addd(muld(v196,addd(muld(v196,addd(muld(v196,addd(muld(v196,addd(idxS{[double],[0]}(1,8,v101),idxS{[double],[0]}(1,7,v101))),idxS{[double],[0]}(1,6,v101))),idxS{[double],[0]}(1,5,v101))),idxS{[double],[0]}(1,4,v101))),idxS{[double],[0]}(1,3,v101))),idxS{[double],[0]}(1,2,v101))),idxS{[double],[0]}(1,1,v101)))),i2d(b2i(gtd(v194,5.00))))) in
         let v208:[double]0 = muld(v207,i2d(signd(v185))) in
         addd(muld(v208,i2d(subi(1,b2i(gted(0.42,absd(v185)))))),muld(v192,i2d(b2i(gted(0.42,absd(v185)))))),v156) in
divd(reduce{[double],[0]}(addd,0.00,eachV{[int,double],[100000]}(fn v361:[int]0 => let v367:[double]1 = idxS{[double],[1]}(1,v361,v209) in
                    let v368:[int]1 = idxS{[int],[1]}(1,1,v2) in
                    let v369:[int]1 = idxS{[int],[1]}(1,2,v2) in
                    let v370:[int]1 = idxS{[int],[1]}(1,3,v2) in
                    let v371:[double]1 = idxS{[double],[1]}(1,1,v1) in
                    let v372:[double]1 = idxS{[double],[1]}(1,2,v1) in
                    let v373:[double]1 = idxS{[double],[1]}(1,3,v1) in
                    let v374:[double]2 = reshape{[double],[1,2]}([5,3],v367) in
                    let v377:[double]2 = zipWith{[double,double,double],[2]}(muld,transp{[double],[2]}(reshape{[double],[1,2]}([3,5],v371)),v374) in
                    let mv378:[double]2 = reshape{[double],[1,2]}([6,3],[0.00]) in
                    let v431:[int]0 = powerScl(fn v413:[int]0 => let v421:[double]1 = zipWith{[double,double,double],[1]}(addd,each{[double,double],[1]}(fn v418:[double]0 => muld(idxS{[double],[0]}(1,v413,v372),v418),idxS{[double],[1]}(1,addi(idxS{[int],[0]}(1,v413,v369),1),mv378)),zipWith{[double,double,double],[1]}(addd,idxS{[double],[1]}(1,v413,v377),each{[double,double],[1]}(fn v415:[double]0 => muld(idxS{[double],[0]}(1,v413,v373),v415),idxS{[double],[1]}(1,addi(idxS{[int],[0]}(1,v413,v370),1),mv378)))) in
                                 let v422:[int]0 = addi(idxS{[int],[0]}(1,v413,v368),1) in
                                 let v430:[int]0 = powerScl(fn v427:[int]0 => let v429:[bool]0 = idxassign([v422,v427],mv378,idxS{[double],[0]}(1,v427,v421)) in
                                              addi(v427,1),3,1) in
                                 addi(v413,1),5,1) in
                    let v434:[double]2 = zipWith{[double,double,double],[2]}(subd,drop{[double],[2]}(1,mv378),take{[double],[2]}(5,mv378)) in
                    let v447:[int]1 = iota(3) in
                    let v448:[int]1 = iota(3) in
                    let v452:[int]2 = transp{[int],[2]}(reshape{[int],[1,2]}(catV{[int],[1,1]}(shape{[int],[1]}(v448),shape{[int],[1]}(v447)),v447)) in
                    let v453:[int]2 = reshape{[int],[1,2]}(catV{[int],[1,1]}(shape{[int],[1]}(v447),shape{[int],[1]}(v448)),v448) in
                    let v461:[double]2 = transp{[double],[2]}(zipWith{[double,double,double],[2]}(muld,v3,each{[int,double],[2]}(i2d,each{[bool,int],[2]}(b2i,zipWith{[int,int,bool],[2]}(gtei,v452,v453))))) in
                    let v462:<int>3 = catV{[int],[1,2]}(dropV{[int],[1]}(1,shape{[double],[2]}(v461)),shape{[double],[2]}(v434)) in
                    let v466:[double]3 = transp2{[double],[3]}([2,1,3],reshape{[double],[2,3]}(v462,v434)) in
                    let v467:<int>3 = catV{[int],[1,2]}(dropV{[int],[1]}(~1,shape{[double],[2]}(v434)),shape{[double],[2]}(v461)) in
                    let v472:[double]3 = transp2{[double],[3]}([1,3,2],reshape{[double],[2,3]}(v467,v461)) in
                    let v477:[double]2 = reduce{[double],[2]}(addd,0.00,zipWith{[double,double,double],[3]}(muld,v466,v472)) in
                    let v490:[double]2 = each{[double,double],[2]}(expd,zipWith{[double,double,double],[2]}(addd,v5,zipWith{[double,double,double],[2]}(muld,v477,v7))) in
                    let v493:[double]2 = drop{[double],[2]}(1,transp{[double],[2]}(scan(muld,cons{[double],[1]}([3758.05,11840.00,1200.00],transp{[double],[2]}(v490))))) in
                    let v503:[double]1 = reduce{[double],[1]}(mind,inf,zipWith{[double,double,double],[2]}(muld,v493,reshape{[double],[1,2]}(shape{[double],[2]}(v493),each{[double,double],[1]}(fn v498:[double]0 => divd(1.00,v498),[3758.05,11840.00,1200.00])))) in
                    let v505:[bool]1 = cat{[bool],[1]}(each{[double,bool],[1]}(fn v504:[double]0 => gted(v504,1.00),v503),[gted(idxS{[double],[0]}(1,5,v503),0.75),tt]) in
                    let v506:[double]0 = muld(1000.00,0.86) in
                    let v512:[double]1 = cat{[double],[1]}(zipWith{[double,double,double],[1]}(muld,[0.98,0.95,0.92,0.89,0.86],eachV{[int,double],[5]}(i2d,eachV{[int,int],[5]}(fn v508:[int]0 => addi(1000,v508),eachV{[int,int],[5]}(fn v507:[int]0 => muli(150,v507),iotaV(5))))),[v506,muld(idxS{[double],[0]}(1,5,v503),v506)]) in
                    idxS{[double],[0]}(1,1,compress{[double],[1]}(v505,v512)),iotaV(100000))),100000.00)
