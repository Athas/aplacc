let v2:<int>2 = [2,muli(3,20)] in
let v3:[int]2 = transp{[int],[2]}(reshape{[int],[1,2]}(v2,cat{[int],[1]}(replicate(0,replicate(0,[3],[20]),[0,1,2]),reshape{[int],[1,1]}([muli(3,20)],iotaV(20))))) in
let v7:[int]2 = each{[double,int],[2]}(ceil,each{[double,double],[2]}(fn v5:[double]0 => divd(v5,3.0),each{[int,double],[2]}(i2d,v3))) in
let v8:[int]2 = prArrI(v7) in
let v9:[bool]1 = compress{[bool],[1]}([ff],[tt]) in
let v10:[bool]1 = prArrB(v9) in
let v11:[bool]1 = compress{[bool],[1]}([tt],[tt]) in
let v12:[bool]1 = prArrB(v11) in
let v13:[bool]1 = replicate(ff,[3],[tt]) in
let v14:[bool]1 = prArrB(v13) in
let v15:[int]1 = replicate(0,zilde,zilde) in
let v16:[int]1 = prArrI(v15) in
let v17:[bool]1 = replicate(ff,[3,2],[tt,ff]) in
let v18:[bool]1 = prArrB(v17) in
let v19:[double]1 = replicate(0.0,[3],[2.0]) in
let v20:[double]1 = prArrD(v19) in
let v21:[double]1 = replicate(0.0,[3,2],[1.0,0.0]) in
let v22:[double]1 = prArrD(v21) in
0.0
